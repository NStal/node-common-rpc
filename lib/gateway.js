// Generated by CoffeeScript 1.6.3
(function() {
  var Gateway, Tunnel, WebSocket, WebSocketGateway, WebSocketServer, events, ws,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Tunnel = require("./tunnel");

  ws = require("ws");

  events = require("events");

  WebSocket = ws;

  WebSocketServer = ws.Server;

  Gateway = (function(_super) {
    __extends(Gateway, _super);

    function Gateway() {
      Gateway.__super__.constructor.call(this);
      this.tunnels = [];
      Gateway.instances.push(this);
    }

    Gateway.prototype.close = function() {
      var item, _i, _len, _ref;
      if (this.isClose) {
        return;
      }
      this.isClose = true;
      if (this.server) {
        this.server.close();
      }
      _ref = this.tunnels;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        item.close(true);
      }
      return this.tunnels = [];
    };

    return Gateway;

  })(events.EventEmitter);

  WebSocketGateway = (function(_super) {
    __extends(WebSocketGateway, _super);

    function WebSocketGateway(port, host) {
      var _this = this;
      WebSocketGateway.__super__.constructor.call(this);
      this.server = new WebSocketServer({
        port: port,
        host: host
      }, function() {
        _this.isReady = true;
        return _this.emit("ready");
      });
      this.server.on("connection", function(ws) {
        var tunnel;
        tunnel = new Tunnel.WebSocketTunnel({
          ws: ws
        });
        _this.emit("connection", tunnel);
        return _this.tunnels.push(tunnel);
      });
      this.server.on("error", function(err) {
        _this.emit("error", err);
        return _this.close();
      });
    }

    return WebSocketGateway;

  })(Gateway);

  Gateway.instances = [];

  Gateway.clear = function() {
    var gateway, _i, _len, _ref, _results;
    _ref = Gateway.instances;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      gateway = _ref[_i];
      console.log("clear server");
      _results.push(gateway.close());
    }
    return _results;
  };

  exports.Gateway = Gateway;

  exports.WebSocketGateway = WebSocketGateway;

}).call(this);
