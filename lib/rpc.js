// Generated by CoffeeScript 1.6.3
(function() {
  var Gateway, Log, RPCInterface, RPCServer, Tunnel, WebSocketGateway, events,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  require("coffee-script");

  events = require("events");

  RPCInterface = (require("./interface.coffee")).RPCInterface;

  Tunnel = (require("./tunnel.coffee")).Tunnel;

  Gateway = (require("./gateway.coffee")).Gateway;

  WebSocketGateway = (require("./gateway.coffee")).WebSocketGateway;

  Log = require("./log.coffee");

  RPCServer = (function(_super) {
    __extends(RPCServer, _super);

    function RPCServer(gateway) {
      this.publicCalls = [];
      this.clients = [];
      if (gateway) {
        this.setGateway(gateway);
      }
    }

    RPCServer.prototype.setGateway = function(gateway) {
      var _this = this;
      if (this.gateway) {
        this.gateway.close();
      }
      this.gateway = gateway;
      this.gateway.on("ready", function() {
        _this.isReady = true;
        return _this.emit("ready");
      });
      this.gateway.on("connection", function(tunnel) {
        var e;
        try {
          return _this.addClient(tunnel);
        } catch (_error) {
          e = _error;
          Log.error("fail to add client:", e);
          return Log.error("tunnel:", tunnel);
        }
      });
      return this.gateway.on("error", function(err) {
        return _this.emit("error", err);
      });
    };

    RPCServer.prototype.serve = function(obj) {
      var item, _results;
      _results = [];
      for (item in obj) {
        if (typeof obj[item] === "function") {
          if (this[item]) {
            throw new Error("RPCServer has property " + item);
          }
          this[item] = obj[item];
          _results.push(this.declare(item));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    RPCServer.prototype.declare = function(name) {
      if (typeof this[name] !== "function") {
        throw new Error(["declare", name, "isnt function"].join(" "));
      }
      return this.publicCalls.push(name);
    };

    RPCServer.prototype.createConfig = function() {
      var config, name, _i, _len, _ref;
      config = {
        publicCalls: [],
        type: "config"
      };
      _ref = this.publicCalls;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        name = _ref[_i];
        console.assert(typeof this[name] === "function");
        config.publicCalls.push({
          name: name,
          count: this[name].length - 1
        });
      }
      return config;
    };

    RPCServer.prototype.close = function() {
      this.gateway.close();
      return this.clients = [];
    };

    RPCServer.prototype.handleRequest = function(req, client) {
      var _ref,
        _this = this;
      if (_ref = req.name, __indexOf.call(this.publicCalls, _ref) < 0) {
        client.write(this.createResponseString({
          error: "Invalid Callback",
          ticket: req.ticket
        }));
        return;
      }
      if (typeof this[req.name] !== "function") {
        client.write(this.createResponseString({
          error: "Server Error",
          ticket: req.ticket
        }));
        return;
      }
      req.args = req.args || [];
      if (this[req.name].length !== req.args.length + 1) {
        client.write(this.createResponseString({
          error: "Invalid Parameter",
          ticket: req.ticket
        }));
        return;
      }
      req.args.push(function(err, data) {
        return client.write(_this.createResponseString({
          error: err,
          data: data,
          ticket: req.ticket
        }));
      });
      return this[req.name].apply(this, req.args);
    };

    RPCServer.prototype.createResponseString = function(data) {
      var rsp;
      rsp = {
        error: data.error,
        ticket: data.ticket,
        data: data.data
      };
      return JSON.stringify(rsp);
    };

    RPCServer.prototype.addClient = function(client) {
      var config,
        _this = this;
      this.clients.push(client);
      config = this.createConfig();
      client.write(JSON.stringify(config));
      client.isRemoved = false;
      client.on("data", function(data) {
        var e, json;
        json = null;
        if (client.isRemoved) {
          return;
        }
        try {
          json = JSON.parse(data);
          return _this.handleRequest(json, client);
        } catch (_error) {
          e = _error;
          Log.error("Recieve Invalid Data From Client", client.toString(), data.toString(), e);
        }
      });
      client.on("error", function(err) {
        if (client.isRemoved) {
          return;
        }
        return _this.emit("error", err);
      });
      return client.on("close", function() {
        return _this.removeClient(client);
      });
    };

    RPCServer.prototype.removeClient = function(client) {
      var index, item, _i, _len, _ref;
      if (client.isRemoved) {
        return true;
      }
      _ref = this.clients;
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        item = _ref[index];
        if (item === client) {
          this.clients.splice(index, 1);
          client.isRemoved;
          item.close();
          return true;
        }
      }
      return false;
    };

    return RPCServer;

  })(events.EventEmitter);

  exports.RPCServer = RPCServer;

  exports.RPCInterface = RPCInterface;

  exports.Tunnel = Tunnel;

  exports.Gateway = Gateway;

  exports.WebSocketGateway = WebSocketGateway;

  exports.Log = Log;

}).call(this);
